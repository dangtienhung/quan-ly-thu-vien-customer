import { LoginRequest, UserRole } from '@/types/auth';
import { useMutation, useQuery } from '@tanstack/react-query';

import { authApi } from '@/apis/auth';
import { useAuthStore } from '@/stores/auth-store';

export const useAuth = () => {
	const { token, user, isAuthenticated, login, logout } = useAuthStore();

	// Login mutation
	const loginMutation = useMutation({
		mutationFn: (credentials: LoginRequest) => authApi.login(credentials),
		onSuccess: async (data: any) => {
			// L∆∞u token tr∆∞·ªõc
			login(data.access_token, null);

			// Sau ƒë√≥ l·∫•y th√¥ng tin user
			try {
				const user = await authApi.getCurrentUser(data.access_token);

				// Ki·ªÉm tra n·∫øu user c√≥ role admin
				if (user.role === UserRole.ADMIN) {
					console.log('üö´ Admin user detected, logging out...');

					// X√≥a token v√† user data ngay l·∫≠p t·ª©c
					logout();

					// X√≥a th√™m localStorage v√† cookie ƒë·ªÉ ƒë·∫£m b·∫£o
					if (typeof window !== 'undefined') {
						localStorage.removeItem('auth-storage');
						localStorage.removeItem('redirectAfterLogin');

						// X√≥a cookie token
						document.cookie =
							'token=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/;';
						document.cookie =
							'token=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/;domain=' +
							window.location.hostname +
							';';
						document.cookie =
							'token=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/;domain=.' +
							window.location.hostname +
							';';
					}

					// Throw error ƒë·ªÉ prevent login
					throw new Error(
						'T√†i kho·∫£n admin kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p v√†o ·ª©ng d·ª•ng kh√°ch h√†ng. Vui l√≤ng s·ª≠ d·ª•ng t√†i kho·∫£n ƒë·ªôc gi·∫£.'
					);
				}

				useAuthStore.getState().setUser(user);
			} catch (error) {
				// N·∫øu l√† admin error, re-throw ƒë·ªÉ UI hi·ªÉn th·ªã
				if (error instanceof Error && error.message.includes('admin')) {
					throw error;
				}
				console.error('Failed to get user info:', error);
			}
		},
	});

	// Logout mutation - t·ª± x·ª≠ l√Ω logout local
	const logoutMutation = useMutation({
		mutationFn: () => Promise.resolve(), // Kh√¥ng g·ªçi API logout
		onSuccess: () => {
			logout();
		},
	});

	// Get current user query
	const currentUserQuery = useQuery({
		queryKey: ['currentUser'],
		queryFn: () => authApi.getCurrentUser(token!),
		enabled: !!token, // Ch·ªâ ch·∫°y khi c√≥ token
		retry: false,
	});

	return {
		// State
		token,
		user,
		isAuthenticated,

		// Mutations
		login: loginMutation.mutate,
		logout: logoutMutation.mutate,

		// Loading states
		isLoggingIn: loginMutation.isPending,
		isLoggingOut: logoutMutation.isPending,

		// Error states
		loginError: loginMutation.error,
		logoutError: logoutMutation.error,

		// Current user
		currentUser: currentUserQuery.data,
		isLoadingUser: currentUserQuery.isLoading,
		userError: currentUserQuery.error,
	};
};
